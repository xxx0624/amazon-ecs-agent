// Code generated by MockGen. DO NOT EDIT.
// Source: ./driver/mount.go

// Package driver is a generated GoMock package.
package driver

import (
	os "os"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	mount_utils "k8s.io/mount-utils"
)

// MockMounter is a mock of Mounter interface.
type MockMounter struct {
	mount_utils.Interface
	ctrl     *gomock.Controller
	recorder *MockMounterMockRecorder
}

// MockMounterMockRecorder is the mock recorder for MockMounter.
type MockMounterMockRecorder struct {
	mock *MockMounter
}

// NewMockMounter creates a new mock instance.
func NewMockMounter(ctrl *gomock.Controller) *MockMounter {
	mock := &MockMounter{ctrl: ctrl}
	mock.recorder = &MockMounterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMounter) EXPECT() *MockMounterMockRecorder {
	return m.recorder
}

// PathExists mocks base method.
func (m *MockMounter) PathExists(path string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PathExists", path)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PathExists indicates an expected call of PathExists.
func (mr *MockMounterMockRecorder) PathExists(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PathExists", reflect.TypeOf((*MockMounter)(nil).PathExists), path)
}

// MockDeviceIdentifier is a mock of DeviceIdentifier interface.
type MockDeviceIdentifier struct {
	ctrl     *gomock.Controller
	recorder *MockDeviceIdentifierMockRecorder
}

// MockDeviceIdentifierMockRecorder is the mock recorder for MockDeviceIdentifier.
type MockDeviceIdentifierMockRecorder struct {
	mock *MockDeviceIdentifier
}

// NewMockDeviceIdentifier creates a new mock instance.
func NewMockDeviceIdentifier(ctrl *gomock.Controller) *MockDeviceIdentifier {
	mock := &MockDeviceIdentifier{ctrl: ctrl}
	mock.recorder = &MockDeviceIdentifierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeviceIdentifier) EXPECT() *MockDeviceIdentifierMockRecorder {
	return m.recorder
}

// EvalSymlinks mocks base method.
func (m *MockDeviceIdentifier) EvalSymlinks(path string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EvalSymlinks", path)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EvalSymlinks indicates an expected call of EvalSymlinks.
func (mr *MockDeviceIdentifierMockRecorder) EvalSymlinks(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EvalSymlinks", reflect.TypeOf((*MockDeviceIdentifier)(nil).EvalSymlinks), path)
}

// Lstat mocks base method.
func (m *MockDeviceIdentifier) Lstat(name string) (os.FileInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Lstat", name)
	ret0, _ := ret[0].(os.FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Lstat indicates an expected call of Lstat.
func (mr *MockDeviceIdentifierMockRecorder) Lstat(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lstat", reflect.TypeOf((*MockDeviceIdentifier)(nil).Lstat), name)
}
